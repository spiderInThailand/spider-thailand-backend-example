// Code generated by MockGen. DO NOT EDIT.
// Source: spider_setting_domain.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"
	model "spider-go/api/model"

	gomock "github.com/golang/mock/gomock"
)

// MockUploadImageUsecase is a mock of UploadImageUsecase interface.
type MockUploadImageUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUploadImageUsecaseMockRecorder
}

// MockUploadImageUsecaseMockRecorder is the mock recorder for MockUploadImageUsecase.
type MockUploadImageUsecaseMockRecorder struct {
	mock *MockUploadImageUsecase
}

// NewMockUploadImageUsecase creates a new mock instance.
func NewMockUploadImageUsecase(ctrl *gomock.Controller) *MockUploadImageUsecase {
	mock := &MockUploadImageUsecase{ctrl: ctrl}
	mock.recorder = &MockUploadImageUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadImageUsecase) EXPECT() *MockUploadImageUsecaseMockRecorder {
	return m.recorder
}

// UploadImageSpiderUsecase mocks base method.
func (m *MockUploadImageUsecase) UploadImageSpiderUsecase(ctx context.Context, spiderUUID string, listImageEncode64 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImageSpiderUsecase", ctx, spiderUUID, listImageEncode64)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadImageSpiderUsecase indicates an expected call of UploadImageSpiderUsecase.
func (mr *MockUploadImageUsecaseMockRecorder) UploadImageSpiderUsecase(ctx, spiderUUID, listImageEncode64 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImageSpiderUsecase", reflect.TypeOf((*MockUploadImageUsecase)(nil).UploadImageSpiderUsecase), ctx, spiderUUID, listImageEncode64)
}

// MockDeleteSpiderInfoUsecase is a mock of DeleteSpiderInfoUsecase interface.
type MockDeleteSpiderInfoUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteSpiderInfoUsecaseMockRecorder
}

// MockDeleteSpiderInfoUsecaseMockRecorder is the mock recorder for MockDeleteSpiderInfoUsecase.
type MockDeleteSpiderInfoUsecaseMockRecorder struct {
	mock *MockDeleteSpiderInfoUsecase
}

// NewMockDeleteSpiderInfoUsecase creates a new mock instance.
func NewMockDeleteSpiderInfoUsecase(ctrl *gomock.Controller) *MockDeleteSpiderInfoUsecase {
	mock := &MockDeleteSpiderInfoUsecase{ctrl: ctrl}
	mock.recorder = &MockDeleteSpiderInfoUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteSpiderInfoUsecase) EXPECT() *MockDeleteSpiderInfoUsecaseMockRecorder {
	return m.recorder
}

// DeleteSpiderInfoUsecase mocks base method.
func (m *MockDeleteSpiderInfoUsecase) DeleteSpiderInfoUsecase(ctx context.Context, spider_uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpiderInfoUsecase", ctx, spider_uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSpiderInfoUsecase indicates an expected call of DeleteSpiderInfoUsecase.
func (mr *MockDeleteSpiderInfoUsecaseMockRecorder) DeleteSpiderInfoUsecase(ctx, spider_uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpiderInfoUsecase", reflect.TypeOf((*MockDeleteSpiderInfoUsecase)(nil).DeleteSpiderInfoUsecase), ctx, spider_uuid)
}

// MockUpdateSpiderInfoUsecase is a mock of UpdateSpiderInfoUsecase interface.
type MockUpdateSpiderInfoUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateSpiderInfoUsecaseMockRecorder
}

// MockUpdateSpiderInfoUsecaseMockRecorder is the mock recorder for MockUpdateSpiderInfoUsecase.
type MockUpdateSpiderInfoUsecaseMockRecorder struct {
	mock *MockUpdateSpiderInfoUsecase
}

// NewMockUpdateSpiderInfoUsecase creates a new mock instance.
func NewMockUpdateSpiderInfoUsecase(ctrl *gomock.Controller) *MockUpdateSpiderInfoUsecase {
	mock := &MockUpdateSpiderInfoUsecase{ctrl: ctrl}
	mock.recorder = &MockUpdateSpiderInfoUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateSpiderInfoUsecase) EXPECT() *MockUpdateSpiderInfoUsecaseMockRecorder {
	return m.recorder
}

// UpdateSpiderInfoUsecase mocks base method.
func (m *MockUpdateSpiderInfoUsecase) UpdateSpiderInfoUsecase(ctx context.Context, spiderInfo model.SpiderInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpiderInfoUsecase", ctx, spiderInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpiderInfoUsecase indicates an expected call of UpdateSpiderInfoUsecase.
func (mr *MockUpdateSpiderInfoUsecaseMockRecorder) UpdateSpiderInfoUsecase(ctx, spiderInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpiderInfoUsecase", reflect.TypeOf((*MockUpdateSpiderInfoUsecase)(nil).UpdateSpiderInfoUsecase), ctx, spiderInfo)
}

// MockRemoveSpiderImageUsecase is a mock of RemoveSpiderImageUsecase interface.
type MockRemoveSpiderImageUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRemoveSpiderImageUsecaseMockRecorder
}

// MockRemoveSpiderImageUsecaseMockRecorder is the mock recorder for MockRemoveSpiderImageUsecase.
type MockRemoveSpiderImageUsecaseMockRecorder struct {
	mock *MockRemoveSpiderImageUsecase
}

// NewMockRemoveSpiderImageUsecase creates a new mock instance.
func NewMockRemoveSpiderImageUsecase(ctrl *gomock.Controller) *MockRemoveSpiderImageUsecase {
	mock := &MockRemoveSpiderImageUsecase{ctrl: ctrl}
	mock.recorder = &MockRemoveSpiderImageUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoveSpiderImageUsecase) EXPECT() *MockRemoveSpiderImageUsecaseMockRecorder {
	return m.recorder
}

// RemoveSpiderImageBySpiderImageNameList mocks base method.
func (m *MockRemoveSpiderImageUsecase) RemoveSpiderImageBySpiderImageNameList(ctx context.Context, spiderUUID string, spiderImageList []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSpiderImageBySpiderImageNameList", ctx, spiderUUID, spiderImageList)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSpiderImageBySpiderImageNameList indicates an expected call of RemoveSpiderImageBySpiderImageNameList.
func (mr *MockRemoveSpiderImageUsecaseMockRecorder) RemoveSpiderImageBySpiderImageNameList(ctx, spiderUUID, spiderImageList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSpiderImageBySpiderImageNameList", reflect.TypeOf((*MockRemoveSpiderImageUsecase)(nil).RemoveSpiderImageBySpiderImageNameList), ctx, spiderUUID, spiderImageList)
}
