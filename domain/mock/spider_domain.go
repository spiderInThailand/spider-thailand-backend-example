// Code generated by MockGen. DO NOT EDIT.
// Source: spider_domain.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"
	model "spider-go/api/model"
	model0 "spider-go/model"

	gomock "github.com/golang/mock/gomock"
)

// MockSpiderRepository is a mock of SpiderRepository interface.
type MockSpiderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSpiderRepositoryMockRecorder
}

// MockSpiderRepositoryMockRecorder is the mock recorder for MockSpiderRepository.
type MockSpiderRepositoryMockRecorder struct {
	mock *MockSpiderRepository
}

// NewMockSpiderRepository creates a new mock instance.
func NewMockSpiderRepository(ctrl *gomock.Controller) *MockSpiderRepository {
	mock := &MockSpiderRepository{ctrl: ctrl}
	mock.recorder = &MockSpiderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpiderRepository) EXPECT() *MockSpiderRepositoryMockRecorder {
	return m.recorder
}

// DeleteSpiderInfoWithSpiderUUID mocks base method.
func (m *MockSpiderRepository) DeleteSpiderInfoWithSpiderUUID(ctx context.Context, spiderUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpiderInfoWithSpiderUUID", ctx, spiderUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSpiderInfoWithSpiderUUID indicates an expected call of DeleteSpiderInfoWithSpiderUUID.
func (mr *MockSpiderRepositoryMockRecorder) DeleteSpiderInfoWithSpiderUUID(ctx, spiderUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpiderInfoWithSpiderUUID", reflect.TypeOf((*MockSpiderRepository)(nil).DeleteSpiderInfoWithSpiderUUID), ctx, spiderUUID)
}

// FindAllSpiderListManager mocks base method.
func (m *MockSpiderRepository) FindAllSpiderListManager(ctx context.Context, page, limit int) ([]model0.SpiderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllSpiderListManager", ctx, page, limit)
	ret0, _ := ret[0].([]model0.SpiderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllSpiderListManager indicates an expected call of FindAllSpiderListManager.
func (mr *MockSpiderRepositoryMockRecorder) FindAllSpiderListManager(ctx, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllSpiderListManager", reflect.TypeOf((*MockSpiderRepository)(nil).FindAllSpiderListManager), ctx, page, limit)
}

// FindAllSpiderListWithActive mocks base method.
func (m *MockSpiderRepository) FindAllSpiderListWithActive(ctx context.Context) ([]model0.SpiderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllSpiderListWithActive", ctx)
	ret0, _ := ret[0].([]model0.SpiderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllSpiderListWithActive indicates an expected call of FindAllSpiderListWithActive.
func (mr *MockSpiderRepositoryMockRecorder) FindAllSpiderListWithActive(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllSpiderListWithActive", reflect.TypeOf((*MockSpiderRepository)(nil).FindAllSpiderListWithActive), ctx)
}

// FindSpiderByUUID mocks base method.
func (m *MockSpiderRepository) FindSpiderByUUID(ctx context.Context, spiderUUID string) (*model0.SpiderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSpiderByUUID", ctx, spiderUUID)
	ret0, _ := ret[0].(*model0.SpiderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSpiderByUUID indicates an expected call of FindSpiderByUUID.
func (mr *MockSpiderRepositoryMockRecorder) FindSpiderByUUID(ctx, spiderUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSpiderByUUID", reflect.TypeOf((*MockSpiderRepository)(nil).FindSpiderByUUID), ctx, spiderUUID)
}

// FindSpiderByUUIDAndStatus mocks base method.
func (m *MockSpiderRepository) FindSpiderByUUIDAndStatus(ctx context.Context, spiderUUID string, isStatusActive bool) (*model0.SpiderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSpiderByUUIDAndStatus", ctx, spiderUUID, isStatusActive)
	ret0, _ := ret[0].(*model0.SpiderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSpiderByUUIDAndStatus indicates an expected call of FindSpiderByUUIDAndStatus.
func (mr *MockSpiderRepositoryMockRecorder) FindSpiderByUUIDAndStatus(ctx, spiderUUID, isStatusActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSpiderByUUIDAndStatus", reflect.TypeOf((*MockSpiderRepository)(nil).FindSpiderByUUIDAndStatus), ctx, spiderUUID, isStatusActive)
}

// FindSpiderInfoByFirstFamilyOrGenus mocks base method.
func (m *MockSpiderRepository) FindSpiderInfoByFirstFamilyOrGenus(ctx context.Context, field, value string) ([]model0.SpiderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSpiderInfoByFirstFamilyOrGenus", ctx, field, value)
	ret0, _ := ret[0].([]model0.SpiderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSpiderInfoByFirstFamilyOrGenus indicates an expected call of FindSpiderInfoByFirstFamilyOrGenus.
func (mr *MockSpiderRepositoryMockRecorder) FindSpiderInfoByFirstFamilyOrGenus(ctx, field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSpiderInfoByFirstFamilyOrGenus", reflect.TypeOf((*MockSpiderRepository)(nil).FindSpiderInfoByFirstFamilyOrGenus), ctx, field, value)
}

// FindSpiderInfoByLocality mocks base method.
func (m *MockSpiderRepository) FindSpiderInfoByLocality(ctx context.Context, locality string, page, limit int32) ([]model0.SpiderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSpiderInfoByLocality", ctx, locality, page, limit)
	ret0, _ := ret[0].([]model0.SpiderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSpiderInfoByLocality indicates an expected call of FindSpiderInfoByLocality.
func (mr *MockSpiderRepositoryMockRecorder) FindSpiderInfoByLocality(ctx, locality, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSpiderInfoByLocality", reflect.TypeOf((*MockSpiderRepository)(nil).FindSpiderInfoByLocality), ctx, locality, page, limit)
}

// FindSpiderInfoBySpiderType mocks base method.
func (m *MockSpiderRepository) FindSpiderInfoBySpiderType(ctx context.Context, family, genus, species string, isLimitPage bool, page, limit int32) ([]model0.SpiderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSpiderInfoBySpiderType", ctx, family, genus, species, isLimitPage, page, limit)
	ret0, _ := ret[0].([]model0.SpiderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSpiderInfoBySpiderType indicates an expected call of FindSpiderInfoBySpiderType.
func (mr *MockSpiderRepositoryMockRecorder) FindSpiderInfoBySpiderType(ctx, family, genus, species, isLimitPage, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSpiderInfoBySpiderType", reflect.TypeOf((*MockSpiderRepository)(nil).FindSpiderInfoBySpiderType), ctx, family, genus, species, isLimitPage, page, limit)
}

// FindSpiderInfoListByGeographies mocks base method.
func (m *MockSpiderRepository) FindSpiderInfoListByGeographies(ctx context.Context, province, district, position string) ([]model0.SpiderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSpiderInfoListByGeographies", ctx, province, district, position)
	ret0, _ := ret[0].([]model0.SpiderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSpiderInfoListByGeographies indicates an expected call of FindSpiderInfoListByGeographies.
func (mr *MockSpiderRepositoryMockRecorder) FindSpiderInfoListByGeographies(ctx, province, district, position interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSpiderInfoListByGeographies", reflect.TypeOf((*MockSpiderRepository)(nil).FindSpiderInfoListByGeographies), ctx, province, district, position)
}

// InsertNewSpider mocks base method.
func (m *MockSpiderRepository) InsertNewSpider(ctx context.Context, data model0.SpiderInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewSpider", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewSpider indicates an expected call of InsertNewSpider.
func (mr *MockSpiderRepositoryMockRecorder) InsertNewSpider(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewSpider", reflect.TypeOf((*MockSpiderRepository)(nil).InsertNewSpider), ctx, data)
}

// UpdateImageFileToSpiderInfo mocks base method.
func (m *MockSpiderRepository) UpdateImageFileToSpiderInfo(ctx context.Context, filesName []string, spiderUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageFileToSpiderInfo", ctx, filesName, spiderUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImageFileToSpiderInfo indicates an expected call of UpdateImageFileToSpiderInfo.
func (mr *MockSpiderRepositoryMockRecorder) UpdateImageFileToSpiderInfo(ctx, filesName, spiderUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageFileToSpiderInfo", reflect.TypeOf((*MockSpiderRepository)(nil).UpdateImageFileToSpiderInfo), ctx, filesName, spiderUUID)
}

// UpdateSpiderInfo mocks base method.
func (m *MockSpiderRepository) UpdateSpiderInfo(ctx context.Context, spiderUUID string, spiderInfo model0.SpiderInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpiderInfo", ctx, spiderUUID, spiderInfo)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSpiderInfo indicates an expected call of UpdateSpiderInfo.
func (mr *MockSpiderRepositoryMockRecorder) UpdateSpiderInfo(ctx, spiderUUID, spiderInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpiderInfo", reflect.TypeOf((*MockSpiderRepository)(nil).UpdateSpiderInfo), ctx, spiderUUID, spiderInfo)
}

// MockRegisterSpiderUsecase is a mock of RegisterSpiderUsecase interface.
type MockRegisterSpiderUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterSpiderUsecaseMockRecorder
}

// MockRegisterSpiderUsecaseMockRecorder is the mock recorder for MockRegisterSpiderUsecase.
type MockRegisterSpiderUsecaseMockRecorder struct {
	mock *MockRegisterSpiderUsecase
}

// NewMockRegisterSpiderUsecase creates a new mock instance.
func NewMockRegisterSpiderUsecase(ctrl *gomock.Controller) *MockRegisterSpiderUsecase {
	mock := &MockRegisterSpiderUsecase{ctrl: ctrl}
	mock.recorder = &MockRegisterSpiderUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterSpiderUsecase) EXPECT() *MockRegisterSpiderUsecaseMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegisterSpiderUsecase) Register(ctx context.Context, req model.SpiderInfo, username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRegisterSpiderUsecaseMockRecorder) Register(ctx, req, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegisterSpiderUsecase)(nil).Register), ctx, req, username)
}

// MockSpiderInfoUsecase is a mock of SpiderInfoUsecase interface.
type MockSpiderInfoUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSpiderInfoUsecaseMockRecorder
}

// MockSpiderInfoUsecaseMockRecorder is the mock recorder for MockSpiderInfoUsecase.
type MockSpiderInfoUsecaseMockRecorder struct {
	mock *MockSpiderInfoUsecase
}

// NewMockSpiderInfoUsecase creates a new mock instance.
func NewMockSpiderInfoUsecase(ctrl *gomock.Controller) *MockSpiderInfoUsecase {
	mock := &MockSpiderInfoUsecase{ctrl: ctrl}
	mock.recorder = &MockSpiderInfoUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpiderInfoUsecase) EXPECT() *MockSpiderInfoUsecaseMockRecorder {
	return m.recorder
}

// GetSpiderImagesUsecase mocks base method.
func (m *MockSpiderInfoUsecase) GetSpiderImagesUsecase(ctx context.Context, fileImages []string) ([]model0.SpiderImageList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpiderImagesUsecase", ctx, fileImages)
	ret0, _ := ret[0].([]model0.SpiderImageList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpiderImagesUsecase indicates an expected call of GetSpiderImagesUsecase.
func (mr *MockSpiderInfoUsecaseMockRecorder) GetSpiderImagesUsecase(ctx, fileImages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpiderImagesUsecase", reflect.TypeOf((*MockSpiderInfoUsecase)(nil).GetSpiderImagesUsecase), ctx, fileImages)
}

// GetSpiderInfoListByGeographies mocks base method.
func (m *MockSpiderInfoUsecase) GetSpiderInfoListByGeographies(ctx context.Context, province, district, position string) ([]model0.SpiderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpiderInfoListByGeographies", ctx, province, district, position)
	ret0, _ := ret[0].([]model0.SpiderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpiderInfoListByGeographies indicates an expected call of GetSpiderInfoListByGeographies.
func (mr *MockSpiderInfoUsecaseMockRecorder) GetSpiderInfoListByGeographies(ctx, province, district, position interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpiderInfoListByGeographies", reflect.TypeOf((*MockSpiderInfoUsecase)(nil).GetSpiderInfoListByGeographies), ctx, province, district, position)
}

// GetSpiderInfoListByLocality mocks base method.
func (m *MockSpiderInfoUsecase) GetSpiderInfoListByLocality(ctx context.Context, locality string, page, size int32) ([]model0.SpiderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpiderInfoListByLocality", ctx, locality, page, size)
	ret0, _ := ret[0].([]model0.SpiderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpiderInfoListByLocality indicates an expected call of GetSpiderInfoListByLocality.
func (mr *MockSpiderInfoUsecaseMockRecorder) GetSpiderInfoListByLocality(ctx, locality, page, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpiderInfoListByLocality", reflect.TypeOf((*MockSpiderInfoUsecase)(nil).GetSpiderInfoListByLocality), ctx, locality, page, size)
}

// GetSpiderInfoListManager mocks base method.
func (m *MockSpiderInfoUsecase) GetSpiderInfoListManager(ctx context.Context, usecase string, page, limit int) ([]model0.SpiderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpiderInfoListManager", ctx, usecase, page, limit)
	ret0, _ := ret[0].([]model0.SpiderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpiderInfoListManager indicates an expected call of GetSpiderInfoListManager.
func (mr *MockSpiderInfoUsecaseMockRecorder) GetSpiderInfoListManager(ctx, usecase, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpiderInfoListManager", reflect.TypeOf((*MockSpiderInfoUsecase)(nil).GetSpiderInfoListManager), ctx, usecase, page, limit)
}

// GetSpiderInfoUsecase mocks base method.
func (m *MockSpiderInfoUsecase) GetSpiderInfoUsecase(ctx context.Context, spiderUUID, username string, isValidateLogin bool) (*model0.SpiderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpiderInfoUsecase", ctx, spiderUUID, username, isValidateLogin)
	ret0, _ := ret[0].(*model0.SpiderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpiderInfoUsecase indicates an expected call of GetSpiderInfoUsecase.
func (mr *MockSpiderInfoUsecaseMockRecorder) GetSpiderInfoUsecase(ctx, spiderUUID, username, isValidateLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpiderInfoUsecase", reflect.TypeOf((*MockSpiderInfoUsecase)(nil).GetSpiderInfoUsecase), ctx, spiderUUID, username, isValidateLogin)
}

// GetSpiderListBySpiderTypeUsecase mocks base method.
func (m *MockSpiderInfoUsecase) GetSpiderListBySpiderTypeUsecase(ctx context.Context, param model0.GetSpiderListBySpiderTypeParam) ([]model0.SpiderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpiderListBySpiderTypeUsecase", ctx, param)
	ret0, _ := ret[0].([]model0.SpiderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpiderListBySpiderTypeUsecase indicates an expected call of GetSpiderListBySpiderTypeUsecase.
func (mr *MockSpiderInfoUsecaseMockRecorder) GetSpiderListBySpiderTypeUsecase(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpiderListBySpiderTypeUsecase", reflect.TypeOf((*MockSpiderInfoUsecase)(nil).GetSpiderListBySpiderTypeUsecase), ctx, param)
}
