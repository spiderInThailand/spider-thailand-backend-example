// Code generated by MockGen. DO NOT EDIT.
// Source: redis_domain.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRedisRepository is a mock of RedisRepository interface.
type MockRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepositoryMockRecorder
}

// MockRedisRepositoryMockRecorder is the mock recorder for MockRedisRepository.
type MockRedisRepositoryMockRecorder struct {
	mock *MockRedisRepository
}

// NewMockRedisRepository creates a new mock instance.
func NewMockRedisRepository(ctrl *gomock.Controller) *MockRedisRepository {
	mock := &MockRedisRepository{ctrl: ctrl}
	mock.recorder = &MockRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisRepository) EXPECT() *MockRedisRepositoryMockRecorder {
	return m.recorder
}

// GetDataFromRedis mocks base method.
func (m *MockRedisRepository) GetDataFromRedis(ctx context.Context, key string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataFromRedis", ctx, key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDataFromRedis indicates an expected call of GetDataFromRedis.
func (mr *MockRedisRepositoryMockRecorder) GetDataFromRedis(ctx, key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataFromRedis", reflect.TypeOf((*MockRedisRepository)(nil).GetDataFromRedis), ctx, key, data)
}

// SetDataToRedisWithTTL mocks base method.
func (m *MockRedisRepository) SetDataToRedisWithTTL(ctx context.Context, key string, data interface{}, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDataToRedisWithTTL", ctx, key, data, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDataToRedisWithTTL indicates an expected call of SetDataToRedisWithTTL.
func (mr *MockRedisRepositoryMockRecorder) SetDataToRedisWithTTL(ctx, key, data, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDataToRedisWithTTL", reflect.TypeOf((*MockRedisRepository)(nil).SetDataToRedisWithTTL), ctx, key, data, ttl)
}
