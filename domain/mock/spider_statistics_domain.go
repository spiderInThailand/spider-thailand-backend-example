// Code generated by MockGen. DO NOT EDIT.
// Source: spider_statistics_domain.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"
	model "spider-go/model"

	gomock "github.com/golang/mock/gomock"
)

// MockStatisticsRepository is a mock of StatisticsRepository interface.
type MockStatisticsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStatisticsRepositoryMockRecorder
}

// MockStatisticsRepositoryMockRecorder is the mock recorder for MockStatisticsRepository.
type MockStatisticsRepositoryMockRecorder struct {
	mock *MockStatisticsRepository
}

// NewMockStatisticsRepository creates a new mock instance.
func NewMockStatisticsRepository(ctrl *gomock.Controller) *MockStatisticsRepository {
	mock := &MockStatisticsRepository{ctrl: ctrl}
	mock.recorder = &MockStatisticsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatisticsRepository) EXPECT() *MockStatisticsRepositoryMockRecorder {
	return m.recorder
}

// FindAllSpiderStatistics mocks base method.
func (m *MockStatisticsRepository) FindAllSpiderStatistics(ctx context.Context) ([]model.SpiderStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllSpiderStatistics", ctx)
	ret0, _ := ret[0].([]model.SpiderStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllSpiderStatistics indicates an expected call of FindAllSpiderStatistics.
func (mr *MockStatisticsRepositoryMockRecorder) FindAllSpiderStatistics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllSpiderStatistics", reflect.TypeOf((*MockStatisticsRepository)(nil).FindAllSpiderStatistics), ctx)
}

// FindFamilyListWithLimitSizePage mocks base method.
func (m *MockStatisticsRepository) FindFamilyListWithLimitSizePage(ctx context.Context, page, limit int32) ([]model.SpiderStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFamilyListWithLimitSizePage", ctx, page, limit)
	ret0, _ := ret[0].([]model.SpiderStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFamilyListWithLimitSizePage indicates an expected call of FindFamilyListWithLimitSizePage.
func (mr *MockStatisticsRepositoryMockRecorder) FindFamilyListWithLimitSizePage(ctx, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFamilyListWithLimitSizePage", reflect.TypeOf((*MockStatisticsRepository)(nil).FindFamilyListWithLimitSizePage), ctx, page, limit)
}

// FindSpiderStatisticsByFamily mocks base method.
func (m *MockStatisticsRepository) FindSpiderStatisticsByFamily(ctx context.Context, family string) (*model.SpiderStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSpiderStatisticsByFamily", ctx, family)
	ret0, _ := ret[0].(*model.SpiderStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSpiderStatisticsByFamily indicates an expected call of FindSpiderStatisticsByFamily.
func (mr *MockStatisticsRepositoryMockRecorder) FindSpiderStatisticsByFamily(ctx, family interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSpiderStatisticsByFamily", reflect.TypeOf((*MockStatisticsRepository)(nil).FindSpiderStatisticsByFamily), ctx, family)
}

// UpsertSpiderStatistics mocks base method.
func (m *MockStatisticsRepository) UpsertSpiderStatistics(ctx context.Context, familyName string, data model.SpiderStatistics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSpiderStatistics", ctx, familyName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSpiderStatistics indicates an expected call of UpsertSpiderStatistics.
func (mr *MockStatisticsRepositoryMockRecorder) UpsertSpiderStatistics(ctx, familyName, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSpiderStatistics", reflect.TypeOf((*MockStatisticsRepository)(nil).UpsertSpiderStatistics), ctx, familyName, data)
}

// MockStatisticsUsecase is a mock of StatisticsUsecase interface.
type MockStatisticsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockStatisticsUsecaseMockRecorder
}

// MockStatisticsUsecaseMockRecorder is the mock recorder for MockStatisticsUsecase.
type MockStatisticsUsecaseMockRecorder struct {
	mock *MockStatisticsUsecase
}

// NewMockStatisticsUsecase creates a new mock instance.
func NewMockStatisticsUsecase(ctrl *gomock.Controller) *MockStatisticsUsecase {
	mock := &MockStatisticsUsecase{ctrl: ctrl}
	mock.recorder = &MockStatisticsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatisticsUsecase) EXPECT() *MockStatisticsUsecaseMockRecorder {
	return m.recorder
}

// GetSpiderStatisticsList mocks base method.
func (m *MockStatisticsUsecase) GetSpiderStatisticsList(ctx context.Context) ([]model.SpiderStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpiderStatisticsList", ctx)
	ret0, _ := ret[0].([]model.SpiderStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpiderStatisticsList indicates an expected call of GetSpiderStatisticsList.
func (mr *MockStatisticsUsecaseMockRecorder) GetSpiderStatisticsList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpiderStatisticsList", reflect.TypeOf((*MockStatisticsUsecase)(nil).GetSpiderStatisticsList), ctx)
}

// MockGetFamilyListUsecase is a mock of GetFamilyListUsecase interface.
type MockGetFamilyListUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGetFamilyListUsecaseMockRecorder
}

// MockGetFamilyListUsecaseMockRecorder is the mock recorder for MockGetFamilyListUsecase.
type MockGetFamilyListUsecaseMockRecorder struct {
	mock *MockGetFamilyListUsecase
}

// NewMockGetFamilyListUsecase creates a new mock instance.
func NewMockGetFamilyListUsecase(ctrl *gomock.Controller) *MockGetFamilyListUsecase {
	mock := &MockGetFamilyListUsecase{ctrl: ctrl}
	mock.recorder = &MockGetFamilyListUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetFamilyListUsecase) EXPECT() *MockGetFamilyListUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetFamilyListUsecase) Execute(ctx context.Context, page, size int32) ([]model.FamilyList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, page, size)
	ret0, _ := ret[0].([]model.FamilyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetFamilyListUsecaseMockRecorder) Execute(ctx, page, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetFamilyListUsecase)(nil).Execute), ctx, page, size)
}
