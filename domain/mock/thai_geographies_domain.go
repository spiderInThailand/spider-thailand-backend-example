// Code generated by MockGen. DO NOT EDIT.
// Source: thai_geographies_domain.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"
	model "spider-go/model"

	gomock "github.com/golang/mock/gomock"
)

// MockThaiGeographiesRepository is a mock of ThaiGeographiesRepository interface.
type MockThaiGeographiesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockThaiGeographiesRepositoryMockRecorder
}

// MockThaiGeographiesRepositoryMockRecorder is the mock recorder for MockThaiGeographiesRepository.
type MockThaiGeographiesRepositoryMockRecorder struct {
	mock *MockThaiGeographiesRepository
}

// NewMockThaiGeographiesRepository creates a new mock instance.
func NewMockThaiGeographiesRepository(ctrl *gomock.Controller) *MockThaiGeographiesRepository {
	mock := &MockThaiGeographiesRepository{ctrl: ctrl}
	mock.recorder = &MockThaiGeographiesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThaiGeographiesRepository) EXPECT() *MockThaiGeographiesRepositoryMockRecorder {
	return m.recorder
}

// FindProvinceWithProvinceNameEN mocks base method.
func (m *MockThaiGeographiesRepository) FindProvinceWithProvinceNameEN(ctx context.Context, provinceName string) (model.Province, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProvinceWithProvinceNameEN", ctx, provinceName)
	ret0, _ := ret[0].(model.Province)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProvinceWithProvinceNameEN indicates an expected call of FindProvinceWithProvinceNameEN.
func (mr *MockThaiGeographiesRepositoryMockRecorder) FindProvinceWithProvinceNameEN(ctx, provinceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProvinceWithProvinceNameEN", reflect.TypeOf((*MockThaiGeographiesRepository)(nil).FindProvinceWithProvinceNameEN), ctx, provinceName)
}

// GetAllProvince mocks base method.
func (m *MockThaiGeographiesRepository) GetAllProvince(ctx context.Context) ([]model.Province, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProvince", ctx)
	ret0, _ := ret[0].([]model.Province)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProvince indicates an expected call of GetAllProvince.
func (mr *MockThaiGeographiesRepositoryMockRecorder) GetAllProvince(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProvince", reflect.TypeOf((*MockThaiGeographiesRepository)(nil).GetAllProvince), ctx)
}

// MockThaiGeographiesUsecase is a mock of ThaiGeographiesUsecase interface.
type MockThaiGeographiesUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockThaiGeographiesUsecaseMockRecorder
}

// MockThaiGeographiesUsecaseMockRecorder is the mock recorder for MockThaiGeographiesUsecase.
type MockThaiGeographiesUsecaseMockRecorder struct {
	mock *MockThaiGeographiesUsecase
}

// NewMockThaiGeographiesUsecase creates a new mock instance.
func NewMockThaiGeographiesUsecase(ctrl *gomock.Controller) *MockThaiGeographiesUsecase {
	mock := &MockThaiGeographiesUsecase{ctrl: ctrl}
	mock.recorder = &MockThaiGeographiesUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThaiGeographiesUsecase) EXPECT() *MockThaiGeographiesUsecaseMockRecorder {
	return m.recorder
}

// GetAllProvince mocks base method.
func (m *MockThaiGeographiesUsecase) GetAllProvince(ctx context.Context) ([]model.Province, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProvince", ctx)
	ret0, _ := ret[0].([]model.Province)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProvince indicates an expected call of GetAllProvince.
func (mr *MockThaiGeographiesUsecaseMockRecorder) GetAllProvince(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProvince", reflect.TypeOf((*MockThaiGeographiesUsecase)(nil).GetAllProvince), ctx)
}

// GetDistictWithProvinceNameEN mocks base method.
func (m *MockThaiGeographiesUsecase) GetDistictWithProvinceNameEN(ctx context.Context, provinceNameEN string) ([]model.District, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistictWithProvinceNameEN", ctx, provinceNameEN)
	ret0, _ := ret[0].([]model.District)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistictWithProvinceNameEN indicates an expected call of GetDistictWithProvinceNameEN.
func (mr *MockThaiGeographiesUsecaseMockRecorder) GetDistictWithProvinceNameEN(ctx, provinceNameEN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistictWithProvinceNameEN", reflect.TypeOf((*MockThaiGeographiesUsecase)(nil).GetDistictWithProvinceNameEN), ctx, provinceNameEN)
}

// GetGeographiesBySpiderType mocks base method.
func (m *MockThaiGeographiesUsecase) GetGeographiesBySpiderType(ctx context.Context, family, genus, species string) ([]model.LocationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeographiesBySpiderType", ctx, family, genus, species)
	ret0, _ := ret[0].([]model.LocationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeographiesBySpiderType indicates an expected call of GetGeographiesBySpiderType.
func (mr *MockThaiGeographiesUsecaseMockRecorder) GetGeographiesBySpiderType(ctx, family, genus, species interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeographiesBySpiderType", reflect.TypeOf((*MockThaiGeographiesUsecase)(nil).GetGeographiesBySpiderType), ctx, family, genus, species)
}
